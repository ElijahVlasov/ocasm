open! Import

let mk name content expected =
  Alcotest.test_case name `Quick @@ fun () ->
  Lexer_for_tests.with_lexer content @@ fun lexer ->
  let got = Lexer.next lexer |> fst in
  Alcotest.check
    (Testable.token Testable.mock_token)
    "Tokens don't coincide" expected got

let suite =
  let open Token in
  [
    mk "Binary"                       "0b1010"          (Bin (Big_integer.of_int64 0b1010L ));
    mk "Octal"                        "0000242455"      (Oct (Big_integer.of_int64 0o000242455L ));
    mk "Unicode"                      "🦜𱍫ퟲ"           (Name "🦜𱍫ퟲ");
    mk "Ascii+unicode"                "aaaa🦜𱍫ퟲ"       (Name "aaaa🦜𱍫ퟲ");
    mk "Ascii+unicode string literal" "\"aaaa🦜𱍫ퟲ\""   (String_literal "aaaa🦜𱍫ퟲ");
    mk "Curly bracket"                "{}"              LCurly;
    mk 
      "Escaped string literal" 
      "\"\\xaa🦜𱍫ퟲ \\x60\\a\\n\\r\""
      (String_literal
         "\170\240\159\166\156\240\177\141\171\237\159\178 `\007\n\r");
    mk 
      "Curly bracket with multiline comments" 
      "/* sdagdgsa \n \n */ /* */{}"
      White_space;
    (* mk  *)
    (*   "Binary long wonky length (255)" *)
    (*   "0b101011000100110100101110110100110100101101010011010010110101001101001011010010110100110100101101001101001011010010110100110100101101001101001011010010110100110100101101001101001011010010110100110100101101001101001011010010110100110100101101001101001011010" *)
    (*   (Bin *)
    (*      [| *)
    (*        0b0110100101101001101001011010010110100110100101101001101001011010L; *)
    (*        0b0110100110100101101001011010011010010110100110100101101001011010L; *)
    (*        0b1010010110100101101001101001011010011010010110100101101001101001L; *)
    (*        0b0101011000100110100101110110100110100101101010011010010110101001L; *)
    (*      |]); *)
    (* mk  *)
    (*   "Binary long normal length (256)" *)
    (*   "0b1101011000100110100101110110100110100101101010011010010110101001101001011010010110100110100101101001101001011010010110100110100101101001101001011010010110100110100101101001101001011010010110100110100101101001101001011010010110100110100101101001101001011010" *)
    (*   (Bin *)
    (*      [| *)
    (*        0b0110100101101001101001011010010110100110100101101001101001011010L; *)
    (*        0b0110100110100101101001011010011010010110100110100101101001011010L; *)
    (*        0b1010010110100101101001101001011010011010010110100101101001101001L; *)
    (*        0b1101011000100110100101110110100110100101101010011010010110101001L; *)
    (*      |]); *)
  ][@@ocamlformat "disable"]
