type t = int32

let equal x y = x = y
let bsf_no_flags = C.Types.bsf_no_flags
let bsf_local = C.Types.bsf_local
let bsf_global = C.Types.bsf_global
let bsf_export = C.Types.bsf_export
let bsf_debugging = C.Types.bsf_debugging
let bsf_function = C.Types.bsf_function
let bsf_keep = C.Types.bsf_keep
let bsf_elf_common = C.Types.bsf_elf_common
let bsf_weak = C.Types.bsf_weak
let bsf_section_sym = C.Types.bsf_section_sym
let bsf_old_common = C.Types.bsf_old_common
let bsf_not_at_end = C.Types.bsf_not_at_end
let bsf_constructor = C.Types.bsf_constructor
let bsf_warning = C.Types.bsf_warning
let bsf_indirect = C.Types.bsf_indirect
let bsf_file = C.Types.bsf_file
let bsf_dynamic = C.Types.bsf_dynamic
let bsf_object = C.Types.bsf_object
let bsf_debugging_reloc = C.Types.bsf_debugging_reloc
let bsf_thread_local = C.Types.bsf_thread_local
let bsf_relc = C.Types.bsf_relc
let bsf_srelc = C.Types.bsf_srelc
let bsf_synthetic = C.Types.bsf_synthetic
let bsf_gnu_indirect_function = C.Types.bsf_gnu_indirect_function
let bsf_gnu_unique = C.Types.bsf_gnu_unique
let bsf_section_sym_used = C.Types.bsf_section_sym_used
let ( |+ ) = Int32.logor
let to_int32 = Fun.id
